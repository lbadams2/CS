when loop was set to 1000, methodB was executing 1000 times.  The start and end times were being recorded before and after the for loop, so the times displayed were not representative of how long it took to execute methodB, they were representative of how long it took to execute methodB 1000 times. Changing loop to 10 measures how long it takes to execute methodB 10 times, and on my machine it takes 0 ms for each value of n.  The complexity of the algorithm contained in methodB is O(n), so the runtime grows at a linear rate dependent on n, since the values of n passed to methodB are all on the same order of magnitude, it makes sense that each invocation of methodB for the different n's would take about the same amount of time.