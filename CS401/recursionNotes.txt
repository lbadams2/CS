for some arguments recursion will continue forever
can't decide ahead of time for given arguments whether it will stop nor not
argument to function is recursive call
m and n are reduced in recursive calls, will eventually get to anchor case
m and n must be positive integers
starting to figure limitations exceeding natural phenomenon
exceeds amount of time the universe is supposed to exist
super exponential is clue to use recursion
not uncomputable don't know answer can prove it terminates

inductive approach explains how the function is defined in terms of itself and the base case

runtime stack shows activation record of each called procedure, runtime stack is dynamic difficult to visualize through taking notes

trace static simplification of runtime stack

recursion tree where each node is the current environment contains parameters and local variables, parent of node is the procedure which called the node
nodes don't record return values 
confusion when building recursion tree with more than 2 calls to itself

activation tree combination of runtime stack and recursion tree4
stack frames give additional information, graphical display makes it easier to understand dynamic behavior4
first evaluate recursive arguments then make recursive outer function call
there will be a recursive child of the current procedure for the recursive argument and a child for the procedure that uses the recursive argument

are we done yet? if so return the results, otherwise simplify the problem, solve the simpler problems and assemble the results into a solution for the original problem
problem is recursion is seen as single entity, however novice programmers have loop model knowledge of recursion
how many unit intervals can be placed within an interval with the condition that the unit intervals have no points in common
random number generated is point in interval, must be between .5 and 9.5 since car's position is based on its center
after one car is parked generate random numbers in the range of the sub intervals
since number generated is center of car and cars extend .5 past center, the random numbers have to be unit apart from any other number
after one car is parked there is space on either side to park the next car so the algorihm can be called for each of those sides
stack implementation stores intervals as a pair of free parking, these pairs are elements of the stack, one side of tree will be processed first 